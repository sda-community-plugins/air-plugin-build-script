<?xml version="1.0" encoding="utf-8" ?>
<project name="air-plugin-build-script" default="all" basedir="."
    xmlns:airplugin="antlib:com.urbancode.air.plugin.ant">
    
    <property environment="env"/>
    <property file=".build.properties"/>
    
    <defaultexcludes add="**/.ahs.*"/>
    <defaultexcludes add="**/*.bom"/>
    <defaultexcludes add="**/.svn/**" />
    <defaultexcludes add="**/.gitignore" />

    <!-- AHP settings -->
    <property name="ahp.branch" value="air" />
    <property name="ahp.workflow.name" value="build workflow [${ahp.branch}]" />
    <property name="version" value="dev"/>
    <property name="plugin.file.name" value="${ahp.project.name}-${version}.zip" />

    <!-- java compilation settings -->
    <property name="debug" value="true"/>
    <property name="debuglevel" value="lines,vars,source"/>
    <property name="deprecation" value="false"/>
    <property name="optimize" value="false"/>
    <property name="source" value="1.6"/>
    <property name="target" value="1.6"/>
    <presetdef name="javac" description="Preset javac to use our custom attribs (memory only applies if fork='true' is supplied)">
        <javac
            encoding="utf-8"
            debug="${debug}"
            debuglevel="${debuglevel}"
            deprecation="${deprecation}"
            nowarn="true"
            optimize="${optimize}"
            source="${source}"
            target="${target}"

            includeantruntime="false"
            memoryinitialsize="256m"
            memorymaximumsize="512m"
            />
    </presetdef>
    
    <!-- =================================================== -->
    <!-- PROJECT STRUCTURE                                   -->
    <!-- =================================================== -->
    
    <property name="dist.dir"          location="dist" />
    <property name="dist.test.dir"          location="${dist.dir}/test" />
    <property name="build.dir"         location="build" />
    <property name="build.plugin.dir"  location="${build.dir}/plugin" />
    <property name="build.plugin.file" location="${build.dir}/${plugin.file.name}" />
    <property name="build.jar.dir"     location="${build.dir}/jar" />
    <property name="lib.dir"           location="lib" />
    <property name="keys.dir"          location="${lib.dir}/keys"/>
    <property name="src.dir"           location="src" />
    <property name="src.wsdl.dir"      location="${src.dir}/main/wsdl" />
    <property name="plugin.zip.dir"    location="${src.dir}/main/zip"/>
    <property name="plugin.groovy.dir" location="${src.dir}/main/groovy"/>

    <property name="lib.validate.dir" location="${lib.dir}/validate"/>
    <property name="build.test.dir" location="${build.dir}/test"/>
    <property name="build.test.data.dir" location="${build.test.dir}/data"/>
    <property name="build.test.classes.dir" location="${build.test.dir}/classes"/>
    <property name="src.test.java.dir" location="${src.dir}/test/java"/>
    <property name="lib.test.dir" location="${lib.dir}/test"/>
    <property name="lib.build.dir" location="${lib.dir}/build"/>
    <property name="lib.build.classes.dir" location="${lib.build.dir}/classes"/>
    <property name="reports.junit.data.dir" location="dist/test"/>
    <property name="reports.junit.html.dir" location="dist/test"/>
    <property name="build.checksum.dir" location="${build.dir}/checksum"/>

    <mkdir dir="${dist.dir}"/>
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${lib.dir}"/>
    
    <!-- =================================================== -->
    <!-- MACROS                                              -->
    <!-- =================================================== -->
    
    <macrodef name="emptyDir" description="Ensure that the target directory exists and is empty">
        <attribute name="dir"/>
        <attribute name="excludes" default=""/>
        <sequential>
            <mkdir dir="@{dir}"/>
            <delete dir="@{dir}" includes="*/**" excludes="@{excludes}" includeemptydirs="true" defaultexcludes="false"/>
        </sequential>
    </macrodef>

  <!-- ==================================================================
         PATHS 
         ================================================================== -->
    <path id="classpath">
      <fileset dir="${lib.dir}">
        <include name="**/*.jar"/>
        <include name="**/*.zip"/>
      </fileset>
    </path>
      
    <path id="classpath.test">
      <fileset dir="${lib.test.dir}">
        <include name="*.jar"/>
      </fileset>
      <pathelement location="${build.main.classes.dir}"/>
      <pathelement location="${build.test.classes.dir}"/>
      <path refid="classpath"/>
    </path>

    <path id="classpath.groovyc">
       <path><fileset dir="${lib.dir}/plugin" includes="*.jar" erroronmissingdir="false"/></path>
       <path><fileset dir="${lib.build.dir}" includes="*.jar" erroronmissingdir="false"/></path>
       <pathelement location="${lib.build.classes.dir}"/>
       <!-- we probably dont want this, but some plugins put the pluginutilscripts-comiled.jar into lib/test -->
       <path><fileset dir="${lib.test.dir}" includes="*.jar" erroronmissingdir="false"/></path>
    </path>

    <!-- =================================================== -->
    <!-- TARGETS                                             -->
    <!-- =================================================== -->

    <target name="taskdef" unless="taskdef.no">
      <path id="taskdefpath">
        <fileset dir="${lib.dir}" includes="*.jar"/>
        <fileset dir="${lib.dir}/build" includes="*.jar"/>
      </path>
        
      <taskdef name="groovy"  classname="org.codehaus.groovy.ant.Groovy" classpathref="taskdefpath" />
      <taskdef name="groovyc" classname="org.codehaus.groovy.ant.Groovyc" classpathref="taskdefpath" />

      <!--
      <taskdef name="air_validate_plugin"
                 classname="com.urbancode.air.plugin.ant.ValidateTask"
                 classpathref="taskdefpath"/>
                 -->
      <taskdef uri="antlib:com.urbancode.air.plugin.ant"
                  resource="com/urbancode/air/plugin/ant/antlib.xml"
                  classpathref="taskdefpath"/>
    </target>
    
    <!-- compile and jar java classes for plugin -->
    <target name="dist-plugin" depends="taskdef">

        <!-- create build.plugin.dir if not already done -->
        <mkdir dir="${build.plugin.dir}"/>

        <!-- validate that the groovy scripts compile -->
        <mkdir dir="${build.dir}/tmp"/>
        <echo>Doing test compilation of groovy files ${plugin.groovy.dir}</echo>
        <groovyc destdir="${build.dir}/tmp" srcdir="${plugin.groovy.dir}">
            <classpath refid="classpath.groovyc"/>
        </groovyc>
        <delete dir="${build.dir}/tmp"/>

        <copy file="${plugin.zip.dir}/info.xml" todir="${build.plugin.dir}"/>
        <airplugin:air_plugin_release infoXml="${build.plugin.dir}/info.xml" version="${version}"/>
      
        <!-- package the plugin -->
        <zip destfile="${build.plugin.file}" update="false" whenempty="fail">
          <zipfileset prefix=""         dir="${plugin.zip.dir}">
            <exclude name="info.xml"/>
          </zipfileset>
          <zipfileset prefix=""         dir="${build.plugin.dir}"/>
          <zipfileset prefix="classes/" dir="${plugin.groovy.dir}"/>
          <zipfileset prefix="lib/"     dir="${lib.dir}">
            <include name="*"/>
            <include name="native/**/*"/>
            <exclude name="test"/>
            <exclude name="validate"/>
            <exclude name="build"/>
          </zipfileset>
          <zipfileset prefix="classes/" dir="${lib.build.classes.dir}" includes="**/*"/>
        </zip>

        <!-- validate the plugin -->
        <airplugin:air_plugin_validate plugin="${build.plugin.file}"/>
        
        <move file="${build.plugin.file}" todir="${dist.dir}"/>
    </target>

    <target name="dist" depends="dist-plugin" description="Create distribution">
    </target>

    <target name="all" depends="dist,run-tests">
    </target>

    <target name="clean" description="Cleans build output">
        <emptyDir dir="${build.dir}"/>
        <emptyDir dir="${dist.dir}"/>
    </target>

    <!-- ###################################################### -->
    <!-- Testing targets                                         -->
    <!-- ###################################################### -->

    <target name="run-tests" depends="compile-tests,dist" unless="tests.no" description="Run tests">
      <mkdir dir="${build.test.data.dir}"/>
      <mkdir dir="${dist.test.dir}"/>
      <junit printsummary="on" haltonfailure="no" haltonerror="no" fork="yes" showoutput="false" failureproperty="tests.failed">
        <jvmarg value="-Dcom.urbancode.winapi.WinAPI.dllPath=${lib.test.dir}/native/windows/x64/WinAPI.dll"/>
        <classpath refid="classpath.test"/>
        <formatter type="brief" usefile="false"/>
        <formatter type="xml"/>
        <batchtest todir="${build.test.data.dir}">
          <fileset dir="${build.test.classes.dir}">
            <include name="**/*Test.class"/>
          </fileset>
        </batchtest>
      </junit>
      <junitreport todir="${dist.test.dir}">
        <fileset dir="${build.test.data.dir}">
          <include name="TEST-*.xml"/>
        </fileset>
        <report format="frames" todir="${dist.test.dir}"/>
      </junitreport>
  
      <fail message="JUnit Tests Failed" if="tests.failed" />
    </target>

    <target name="run-single-test" depends="compile-tests" unless="tests.no">
      <delete dir="${build.test.data.dir}"/>
      <delete dir="${dist.test.dir}"/>
      <mkdir dir="${build.test.data.dir}"/>
      <mkdir dir="${dist.test.dir}"/>

      <junit printsummary="withOutAndErr" haltonfailure="false" fork="yes" showoutput="yes" failureproperty="tests.failed">
        <jvmarg value="-Dcom.urbancode.winapi.WinAPI.dllPath=${lib.test.dir}/native/windows/x64/WinAPI.dll"/>
        <classpath refid="classpath.test"/>
        <formatter type="brief" usefile="false"/>
        <formatter type="xml"/>
        <batchtest todir="${build.test.data.dir}">
          <fileset dir="${build.test.classes.dir}">
            <include name="**/${run.test}.class"/>
          </fileset>
        </batchtest>
      </junit>
  
      <junitreport todir="${dist.test.dir}">
        <fileset dir="${build.test.data.dir}">
          <include name="TEST-*.xml"/>
        </fileset>
      <report format="frames" todir="${dist.test.dir}"/>
      </junitreport>
    </target>
  
    <target name="compile-tests" depends="dist">
    <mkdir dir="${build.test.classes.dir}"/>
      <javac srcdir="${src.test.java.dir}" destdir="${build.test.classes.dir}">
        <classpath refid="classpath.test"/>
      </javac>
    </target>
</project>
